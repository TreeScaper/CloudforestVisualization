/**
 * Manage TreeScaper bipartition parsing and data requests.
 */
let event_build_fn = undefined;
let bipartition_files = { matrix: undefined, log: undefined }; //{matrix: <bipartion matrix file>, log: <bipartion log file>}
let trees_by_partition = undefined;
let partition_taxa = undefined;
/**
* Parses the TreeScaper bipartition matrix producing a BP -> tree object.
* Key: bipartition number; Value: array of trees where the bipartition is present.
* 
* @param {[]} m - Bipartition Matrix generated by TreeScaper
*/
const parse_bipartition = function (m) {
    let b = {};
    m.forEach(r => {
        let bp_name = String(Number(r[0].trim()) + 1);
        if (!(bp_name in b)) {
            b[bp_name] = [];
        }
        b[bp_name].push(r[1]);
    });
    return b;
}
/**
 * 
 * loading all parameters
unweighted unrooted trees
Successfully read 1000 trees from file: dummy_link.dat.
Unique bipartition number: 48
Translation of taxa:
LngfishAu , 1
LngfishSA , 2
LngfishAf , 3
Frog , 4
Turtle , 5
Crocodile , 6
Bird , 7
Sphenodon , 8
Lizard , 9
Human , 10
Seal , 11
Cow , 12
Whale , 13
Mouse , 14
Rat , 15
Platypus , 16
Opossum , 17
bipartition 1 : 00001111000000000, appear times: 453
bipartition 2 : 00000111000000000, appear times: 209
bipartition 3 : 00000001011111111, appear times: 11
bipartition 4 : 00001101000000000, appear times: 1
bipartition 5 : 00000101000000000, appear times: 1
bipartition 6 : 00000000010111100, appear times: 1
bipartition 7 : 00000000001111100, appear times: 25
bipartition 8 : 00000000000110000, appear times: 994
bipartition 9 : 00000000010100000, appear times: 1
bipartition 10 : 00000000001100000, appear times: 2
bipartition 11 : 00001110000000000, appear times: 713
bipartition 12 : 00000110000000000, appear times: 977
bipartition 13 : 00000000011111111, appear times: 1000
bipartition 14 : 00000000011111101, appear times: 8
bipartition 15 : 00001111011111111, appear times: 15
bipartition 16 : 00000000000001100, appear times: 1000
bipartition 17 : 00000000010010000, appear times: 2
bipartition 18 : 00001001100000000, appear times: 2
bipartition 19 : 00000111011111111, appear times: 1
bipartition 20 : 00000000001010000, appear times: 1
bipartition 21 : 00000001100000000, appear times: 187
bipartition 22 : 00000000011000000, appear times: 198
bipartition 23 : 00000000000000011, appear times: 983
bipartition 24 : 00001100000000000, appear times: 7
bipartition 25 : 00000000000111100, appear times: 1
bipartition 26 : 00000000011110000, appear times: 894
bipartition 27 : 00001000100000000, appear times: 4
bipartition 28 : 00000011000000000, appear times: 2
bipartition 29 : 00001111100000000, appear times: 981
bipartition 30 : 00000000001111111, appear times: 5
bipartition 31 : 00000111100000000, appear times: 208
bipartition 32 : 00011111100000000, appear times: 1
bipartition 33 : 00000000011001100, appear times: 4
bipartition 34 : 00000000000001111, appear times: 9
bipartition 35 : 00001001000000000, appear times: 2
bipartition 36 : 01100000000000000, appear times: 1000
bipartition 37 : 00001010000000000, appear times: 13
bipartition 38 : 00001110100000000, appear times: 203
bipartition 39 : 00000000011111110, appear times: 9
bipartition 40 : 00000000011111100, appear times: 991
bipartition 41 : 00000110100000000, appear times: 9
bipartition 42 : 00000000010110000, appear times: 96
bipartition 43 : 00000000111111111, appear times: 1
bipartition 44 : 00000000001110000, appear times: 683
bipartition 45 : 00001111111111111, appear times: 999
bipartition 46 : 00011111111111111, appear times: 1000
bipartition 47 : 00000000010001100, appear times: 68
bipartition 48 : 00000000001001100, appear times: 25
Successfully computed bipartitation matrix.
Output bipartition matrix in list format to dummy_link_unrooted_unweighted_listFormat_bipartition.out
Successfully computed Unweighted RF-distance distance.
Successfully printed Unweighted RF-distance matrix!
 
 */

/**
 * Parse the bipartion log file. Produce a "in" or "out" of taxa by partition.
 * 
 * @param {*} m - bipartition log file. An array of strings
 */
const parse_taxa_partitions = function (m) {
    let taxa_array = [];
    let part_taxa = {};
    let inTaxa = false;
    m.forEach(line => {
        if (line[0].startsWith("bipartition")) {
            //leave list of taxa into list of bipartitions
            inTaxa = false;
            //bipartition 1 : 00001111000000000, appear times: 453
            //parse the bipartition line.
            let m = line[0].match(/bipartition\s(\d+)\s+:\s+(\d+)/);
            let bp = m[1];
            part_taxa[bp] = [];
            m[2].split("").forEach((e, idx) => {
                if (e === "1") {
                    part_taxa[bp].push(taxa_array[idx]);
                }
            });
        }
        if (inTaxa) {
            let arr = line[0].split(',');
            taxa_array.push(arr[0].trim());
        }
        if (line[0].indexOf("Translation") > -1) {
            //starting list of taxa
            inTaxa = true;
        }
    });
    return part_taxa;
}

const bipartition_data_init = function (init_obj) {
    let { guid_fn, event_fn } = init_obj;
    event_build_fn = event_fn;
    const my_guid = guid_fn();

    addEventListener("FileContents", e => {
        if (e.detail.guid === my_guid) {
            trees_by_partition = parse_bipartition(e.detail.contents[bipartition_files.matrix.name]);
            partition_taxa = parse_taxa_partitions(e.detail.contents[bipartition_files.log.name]);
        }
    });

    addEventListener("BipartitionFiles", e => {
        let m = e.detail.files.filter(obj => RegExp(/[Bb]ipartition [Mm]atrix/).test(obj.name));
        let l = e.detail.files.filter(obj => RegExp(/[Bb]ipartition[Ll]og/).test(obj.name));
        bipartition_files.matrix = m[0];
        bipartition_files.log = l[0];
        dispatchEvent(event_build_fn("FileContentsRequest", {
            guid: my_guid,
            files: [bipartition_files.matrix.id, bipartition_files.log.id]
        }));
    });
    dispatchEvent(event_build_fn("RequestBipartitionFile", {}));
}

export { bipartition_data_init }